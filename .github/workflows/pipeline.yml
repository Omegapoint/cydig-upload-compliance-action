name: Test and Build
run-name: ${{ github.actor }} is testing out github actions
permissions:
  contents: write
  pages: write
  id-token: write

#env:
#    configFile: '${{ github.workspace }}/cydigConfig.json'
#    disableWarningUsersInProd: false
#    threatModelingDate: 'casd'
#    threatModelingTag: 'dsad'
#    pentestDate: ''
#    pentestTag: ''
#    scaTool: ''
#    sastTool: ''
#    codeQualityTool: ''
#    nameOfBoard: ''
#    mendValues.mendUserKey: ''
#    mendValues.mendProjectName: ''
#    mendValues.mendProductToken: ''
#    mendValues.mendDomain: ''
#    sonarQubeValues.sonarQubeProjectKey: ''
#    sonarQubeValues.sonarQubeUserKey: ''
#    sonarQubeValues.sonarQubeDomain: ''

on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout action
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3

      - name: Update URL variables
        run: |
          (Get-Content '${{ github.workspace }}/config.json') | Foreach-Object {
              $_ -replace '###urlupdate###', '${{vars.URLUPDATECOMPLIANCESTATE}}' `
                -replace '###urlread###', '${{vars.URLREADTOREADME}}' `
                -replace '###urldashboard###', '${{vars.URLDASHBOARD}}' `
                -replace '###readtoreadmeaccesskey###', '${{secrets.READTOREADMEACCESSKEY}}' `

              } | Set-Content '${{ github.workspace }}/config.json'
        shell: pwsh

      - name: Install dependencies
        run: npm ci
      - name: Compile to Javascript
        run: npm run build
        working-directory: ${{ github.workspace }}/src
      - name: Run tests
        run: npm run testScript
      - name: Commit and push build to repo
        run: |
          git add dist
          git config --global user.name ${{ github.actor }}
          git commit -m "Automated Build"
          git push

      #- name: Set Environment Variables
      #  run: |
      #    echo "configFile=${{ env.configFile }}" >> $GITHUB_ENV
      #    echo "disableWarningUsersInProd=${{ env.disableWarningUsersInProd }}" >> $GITHUB_ENV
      #    echo "threatModelingDate=${{ env.threatModelingDate }}" >> $GITHUB_ENV
      #    echo "threatModelingTag=${{ env.threatModelingTag }}" >> $GITHUB_ENV
      #    echo "pentestDate=${{ env.pentestDate }}" >> $GITHUB_ENV
      #    echo "pentestTag=${{ env.pentestTag }}" >> $GITHUB_ENV
      #    echo "scaTool=${{ env.scaTool }}" >> $GITHUB_ENV
      #    echo "sastTool=${{ env.sastTool }}" >> $GITHUB_ENV
      #    echo "codeQualityTool=${{ env.codeQualityTool }}" >> $GITHUB_ENV
      #    echo "nameOfBoard=${{ env.nameOfBoard }}" >> $GITHUB_ENV
      #    echo "mendValues.mendUserKey=${{ env.mendValues.mendUserKey }}" >> $GITHUB_ENV
      #    echo "mendValues.mendProjectName=${{ env.mendValues.mendProjectName }}" >> $GITHUB_ENV
      #    echo "mendValues.mendProductToken=${{ env.mendValues.mendProductToken }}" >> $GITHUB_ENV
      #    echo "mendValues.mendDomain=${{ env.mendValues.mendDomain }}" >> $GITHUB_ENV
      #    echo "sonarQubeValues.sonarQubeProjectKey=${{ env.sonarQubeValues.sonarQubeProjectKey }}" >> $GITHUB_ENV
      #    echo "sonarQubeValues.sonarQubeUserKey=${{ env.sonarQubeValues.sonarQubeUserKey }}" >> $GITHUB_ENV
      #    echo "sonarQubeValues.sonarQubeDomain=${{ env.sonarQubeValues.sonarQubeDomain }}" >> $GITHUB_ENV

      #- name: 'Az CLI login'
      #  uses: azure/login@v1
      #  with:
      #    client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #    tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #    subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #- name: 'Run Azure CLI commands'
      #  run: az account show

      # - name: 'Run Upload Compliance State'
      #   uses: ./uploadcompliancestateaction
      #   with:
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     cydigConfigPath: ${{ github.workspace }}/cydigConfig.json
